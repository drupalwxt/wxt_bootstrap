<?php

/**
 * @file
 * The primary PHP file for the Drupal WxT Bootstrap base theme.
 *
 * This file should only contain light helper functions and point to stubs in
 * other files containing more complex functions.
 *
 * The stubs should point to files within the `./includes` directory named after
 * the function itself minus the theme prefix. If the stub contains a group of
 * functions, then please organize them so they are related in some way and name
 * the file appropriately to at least hint at what it contains.
 *
 * All [pre]process functions, theme functions and template files lives inside
 * the `./templates` directory. This is a highly automated and complex system
 * designed to only load the necessary files when a given theme hook is invoked.
 *
 * Visit this project's official documentation site https://drupal-bootstrap.org
 * or the markdown files inside the `./docs` directory.
 *
 * @see bootstrap_theme()
 * @see \Drupal\bootstrap\Registry
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter.
 */
function wxt_bootstrap_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (strpos($form_id, 'wxt_search') >= 0 && isset($form['form_build_id'])) {
    if ($form['form_build_id']['#type'] == 'hidden') {
      // WCAG forbids hidden input elements with an autocomplete on/off.
      unset($form['form_build_id']['#attributes']['autocomplete']);
    }
  }
}

/**
 * Implements hook_preprocess_page.
 */
function wxt_bootstrap_preprocess_page(&$variables) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();

  if ($language == 'en') {
    $variables['main_menu_label'] = '<span class="wb-inv">Main </span>Menu <span class="expicon glyphicon glyphicon-chevron-down"></span>';
  }
  elseif ($language == 'fr') {
    $variables['main_menu_label'] = 'Menu<span class="wb-inv"> principal</span> <span class="expicon glyphicon glyphicon-chevron-down"></span>';
  }

  $node = \Drupal::routeMatch()->getParameter('node');
  $variables['is_book'] = FALSE;

  if ($node instanceof \Drupal\node\NodeInterface) {
    if (isset($node->book) && !empty($node->book)) {
      $variables['is_book'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_block.
 */
function wxt_bootstrap_preprocess_block(&$variables) {
  $plugin_id = $variables['elements']['#plugin_id'];

  if ($plugin_id == 'system_branding_block') {
    $language = \Drupal::languageManager()->getCurrentLanguage()->getId();

    if ($language == 'en') {
      $variables['language_opposite'] = 'fr';
      $variables['label_opposite'] = 'Gouvernement du Canada';
    }
    elseif ($language == 'fr') {
      $variables['language_opposite'] = 'en';
      $variables['label_opposite'] = 'Government of Canada';
    }
  }

  if ($plugin_id == 'book_navigation') {
    $node = \Drupal::routeMatch()->getParameter('node');

    if ($node instanceof \Drupal\node\NodeInterface) {
      $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();

      // Used to prepend book title to page title
      if (isset($node->book) && !empty($node->book) && $node->book['bid'] != $node->id()) {
        $book =  \Drupal::entityTypeManager()->getStorage('node')->load($node->book['bid']);

        if ($book) {
          if ($book->hasTranslation($langcode)) {
            $book = $book->getTranslation($langcode);
          }

          $variables['book_title'] = $book->getTitle();
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_links.
 */
function wxt_bootstrap_preprocess_links(&$variables) {
  $links = &$variables['links'];

  foreach ($links as $id => &$link) {
    if ($id == 'book_add_child') {
      $link['link']['#options']['attributes']['class'][] = 'button button--primary btn-success btn icon-before';
      $link['attributes']->addClass('mrgn-tp-sm');
      $icon_class = 'glyphicon glyphicon-plus';
    }

    if ($id == 'book_printer') {
      $link['link']['#options']['attributes']['class'][] = 'button btn-default btn icon-before';
      $link['attributes']->addClass('mrgn-tp-sm');
      $icon_class = 'glyphicon glyphicon-print';
    }

    if (isset($icon_class)) {
      $link['link']['#title'] = [
        '#type' => 'inline_template',
        '#template' => '<span class="{{ icon }}" aria-hidden="true"></span>{{ title }}',
        '#context' => [
          'title' => is_string($link['link']['#title']) ? $link['link']['#title']: $link['link']['#title']->getUntranslatedString(),
          'icon' => $icon_class
        ]
      ];
    }
  }
}

/**
 * Implements hook_preprocess_block.
 */
function wxt_bootstrap_preprocess_input__button(&$vars) {
  if (isset($vars['attributes'])) {
    $attrObj = $vars['attributes'];
    if ($attrObj->offsetExists('id') == 'wb-srch-sub') {
      $attrObj->setAttribute('title', t('Search'));
    }
  }
}

/**
 * Implements hook_preprocess_input().
 */
function wxt_bootstrap_preprocess_input(&$variables) {
  if (!empty($variables['attributes']['id'])) {
    $id = $variables['attributes']['id']->value();
  }

  if (!empty($id) && $id == 'wb-srch-sub') {
    $variables['search_submit'] = 'true';
  }
  else {
    $variables['search_submit'] = 'false';
  }
}

/**
 * Implements hook_preprocess_input().
 */
function wxt_bootstrap_preprocess_book_navigation(&$variables) {
  if (!empty($variables['tree']['#items'])) {
    foreach ($variables['tree']['#items'] as $nid => &$item) {
      $book_page =  \Drupal::entityTypeManager()->getStorage('node')->load($nid);
      $summary = $book_page->get('body')->getValue()[0]['summary'];

      $item['summary'] = $summary;
    }
  }
}
