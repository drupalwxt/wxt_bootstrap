<?php

/**
 * @file
 * The primary PHP file for the Drupal WxT Bootstrap base theme.
 *
 * This file should only contain light helper functions and point to stubs in
 * other files containing more complex functions.
 *
 * The stubs should point to files within the `./includes` directory named after
 * the function itself minus the theme prefix. If the stub contains a group of
 * functions, then please organize them so they are related in some way and name
 * the file appropriately to at least hint at what it contains.
 *
 * All [pre]process functions, theme functions and template files lives inside
 * the `./templates` directory. This is a highly automated and complex system
 * designed to only load the necessary files when a given theme hook is invoked.
 *
 * Visit this project's official documentation site https://drupal-bootstrap.org
 * or the markdown files inside the `./docs` directory.
 *
 * @see bootstrap_theme()
 * @see \Drupal\bootstrap\Registry
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_alter().
 */
function wxt_bootstrap_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (strpos($form_id, 'wxt_search') >= 0 && isset($form['form_build_id'])) {
    if ($form['form_build_id']['#type'] == 'hidden') {
      // WCAG forbids hidden input elements with an autocomplete on/off.
      unset($form['form_build_id']['#attributes']['autocomplete']);
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function wxt_bootstrap_preprocess_page(&$variables) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();

  if ($language == 'en') {
    $variables['main_menu_label'] = '<span class="wb-inv">Main </span>Menu <span class="expicon glyphicon glyphicon-chevron-down"></span>';
    $variables['lang_iso_639_2'] = 'eng';
  }
  elseif ($language == 'fr') {
    $variables['main_menu_label'] = 'Menu<span class="wb-inv"> principal</span> <span class="expicon glyphicon glyphicon-chevron-down"></span>';
    $variables['lang_iso_639_2'] = 'fra';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function wxt_bootstrap_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $moduleHandler = \Drupal::service('module_handler');

  if ($moduleHandler->moduleExists('wxt_ext_book')) {
    $node = \Drupal::routeMatch()->getParameter('node');

    if ($node instanceof NodeInterface) {
      if (!empty($node->book) && $node->book['bid'] != 0) {
        /** @var \Drupal\wxt_library\LibraryService $wxt */
        $wxt = \Drupal::service('wxt_library.service_wxt');
        $wxt_active = $wxt->getLibraryName();

        if ($node->book['bid'] == $node->id()) {
          // Theme book index page.
          $suggestions[] = $variables['theme_hook_original'] . '__book_index';
          $suggestions[] = $variables['theme_hook_original'] . '__' . $wxt_active . '__book_index';
        }
        else {
          // Theme book child page.
          $suggestions[] = $variables['theme_hook_original'] . '__book_page';
          $suggestions[] = $variables['theme_hook_original'] . '__' . $wxt_active . '__book_page';
        }
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function wxt_bootstrap_theme_suggestions_book_navigation_alter(array &$suggestions, array $variables) {
  $moduleHandler = \Drupal::service('module_handler');

  if ($moduleHandler->moduleExists('wxt_ext_book')) {
    $suggestions[] = $variables['theme_hook_original'] . '__gcweb';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function wxt_bootstrap_theme_suggestions_book_tree_alter(array &$suggestions, array $variables) {
  $moduleHandler = \Drupal::service('module_handler');

  if ($moduleHandler->moduleExists('wxt_ext_book')) {
    $suggestions[] = 'book_tree__gcweb';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function wxt_bootstrap_theme_suggestions_views_view_alter(&$suggestions, $variables) {
  $view = $variables['view'];
  $suggestions[] = "views_view__" . $view->id();
  $suggestions[] = "views_view__" . $view->id() . "__" . $view->current_display;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function wxt_bootstrap_theme_suggestions_views_view_unformatted_alter(&$suggestions, $variables) {
  $view = $variables['view'];
  $suggestions[] = "views_view_unformatted__" . $view->id();
  $suggestions[] = "views_view_unformatted__" . $view->id() . "__" . $view->current_display;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function wxt_bootstrap_theme_suggestions_views_view_list_alter(&$suggestions, $variables) {
  $view = $variables['view'];
  $suggestions[] = "views_view_list__" . $view->id();
  $suggestions[] = "views_view_list__" . $view->id() . "__" . $view->current_display;
}

/**
 * Implements hook_preprocess_block().
 */
function wxt_bootstrap_preprocess_block(&$variables) {
  $plugin_id = $variables['elements']['#plugin_id'];

  if ($plugin_id == 'system_branding_block') {
    $language = \Drupal::languageManager()->getCurrentLanguage()->getId();

    if ($language == 'en') {
      $variables['language_opposite'] = 'fr';
      $variables['label_opposite'] = 'Gouvernement du Canada';
    }
    elseif ($language == 'fr') {
      $variables['language_opposite'] = 'en';
      $variables['label_opposite'] = 'Government of Canada';
    }
  }

  if (strpos($plugin_id, 'facet_block') !== FALSE) {
    $theme_name = \Drupal::theme()->getActiveTheme()->getName();
    $collapsible_facets = theme_get_setting('wxt_facets_collapsible', $theme_name);
    $facet_panel_type = theme_get_setting('wxt_facets_panel_type', $theme_name);
    $variables['collapsible_facets'] = $collapsible_facets;
    $variables['facet_panel_type'] = $facet_panel_type;
  }

  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('wxt_ext_blocks')) {
    $variables['label_display'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_input__button().
 */
function wxt_bootstrap_preprocess_input__button(&$vars) {
  if (isset($vars['attributes'])) {
    $attrObj = $vars['attributes'];
    if ($attrObj->offsetExists('id') && $attrObj->offsetGet('id')->__toString() == 'wb-srch-sub') {
      $attrObj->setAttribute('title', t('Search'));
    }
  }
}

/**
 * Implements hook_preprocess_image().
 */
function wxt_bootstrap_preprocess_image(&$vars) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == 'page_manager.page_view_blog_blog-panels_variant-0') {
    if ($vars['style_name'] == 'blog_spotlight') {
      unset($vars['attributes']['width']);
      unset($vars['attributes']['height']);
      $vars['attributes']['class'] = 'mrgn-bttm-md thumbnail';
    }
  }
}

/**
 * Implements hook_preprocess_input().
 */
function wxt_bootstrap_preprocess_input(&$variables) {
  if (!empty($variables['attributes']['id'])) {
    $id = $variables['attributes']['id']->value();
  }

  if (!empty($id) && $id == 'wb-srch-sub') {
    $variables['search_submit'] = 'true';
  }
  else {
    $variables['search_submit'] = 'false';
  }
}

/**
 * Implements hook_preprocess_filter_caption().
 */
function wxt_bootstrap_preprocess_filter_caption(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');

  if (!$node instanceof NodeInterface) {
    // Show caption if not on a node page to ensure it displays in CKEditor.
    $variables['show_caption'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_field().
 */
function wxt_bootstrap_preprocess_field(&$variables) {
  if ($variables['element']['#bundle'] == 'remote_video') {
    // Get title and URL of remote video.
    $youtube_domains = [
      'youtube.com',
      'youtu.be',
    ];

    $video_url = $variables['element']['#items'][0]->getValue()['value'];

    foreach ($youtube_domains as $domain) {
      if (strpos($video_url, $domain) !== FALSE) {
        $variables['video_title'] = $variables['element'][0]['#attributes']['title'];
        $variables['video_url'] = $video_url;
        break;
      }
    }
  }

  if ($variables['element']['#bundle'] == 'video' && $variables['element']['#field_name'] == 'field_media_video_file') {
    $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $media = $variables['element']['#object'];

    if ($lang == 'fr' && $media->hasTranslation($lang)) {
      $media = $media->getTranslation($lang);
    }

    $fid = $media->get('field_media_video_file')->getValue()[0]['target_id'];
    $file = File::load($fid);
    $video_uri = $file->getFileUri();

    $variables['video_uri'] = \Drupal::service('file_url_generator')->generateString($video_uri);
    $variables['video_title'] = $media->getName();
  }
}

/**
 * Implements hook_preprocess_media().
 */
function wxt_bootstrap_preprocess_media(&$variables) {
  $variables['attributes']['class'][] = 'wxt-media-' . str_replace('_', '-', $variables['view_mode']);
}

/**
 * Implements hook_preprocess_page_title().
 */
function wxt_bootstrap_preprocess_page_title(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');

  $checkFieldName = 'field_lead_title';
  if ($node instanceof NodeInterface && $node->hasField($checkFieldName) && !$node->get($checkFieldName)->isEmpty()) {
    $variables['gc_thickline'] = TRUE;
    $variables['lead_title'] = $node->get($checkFieldName)->first()->getString();
  }
}
