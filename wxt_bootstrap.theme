<?php

/**
 * @file
 * The primary PHP file for the Drupal WxT Bootstrap base theme.
 *
 * This file should only contain light helper functions and point to stubs in
 * other files containing more complex functions.
 *
 * The stubs should point to files within the `./includes` directory named after
 * the function itself minus the theme prefix. If the stub contains a group of
 * functions, then please organize them so they are related in some way and name
 * the file appropriately to at least hint at what it contains.
 *
 * All [pre]process functions, theme functions and template files lives inside
 * the `./templates` directory. This is a highly automated and complex system
 * designed to only load the necessary files when a given theme hook is invoked.
 *
 * Visit this project's official documentation site https://drupal-bootstrap.org
 * or the markdown files inside the `./docs` directory.
 *
 * @see bootstrap_theme()
 * @see \Drupal\bootstrap\Registry
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_alter.
 */
function wxt_bootstrap_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (strpos($form_id, 'wxt_search') >= 0 && isset($form['form_build_id'])) {
    if ($form['form_build_id']['#type'] == 'hidden') {
      // WCAG forbids hidden input elements with an autocomplete on/off.
      unset($form['form_build_id']['#attributes']['autocomplete']);
    }
  }
}

/**
 * Implements hook_preprocess_page.
 */
function wxt_bootstrap_preprocess_page(&$variables) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();

  if ($language == 'en') {
    $variables['main_menu_label'] = '<span class="wb-inv">Main </span>Menu <span class="expicon glyphicon glyphicon-chevron-down"></span>';
  }
  elseif ($language == 'fr') {
    $variables['main_menu_label'] = 'Menu<span class="wb-inv"> principal</span> <span class="expicon glyphicon glyphicon-chevron-down"></span>';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function wxt_bootstrap_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $moduleHandler = \Drupal::service('module_handler');

  if ($moduleHandler->moduleExists('wxt_ext_book')) {
    $node = \Drupal::routeMatch()->getParameter('node');

    if ($node instanceof NodeInterface) {
      if (!empty($node->book)) {
        if ($node->book['bid'] == $node->id()) {
          // Theme book index page
          $suggestions[] = $variables['theme_hook_original'] . '__book_index';
        }
        else {
          // Theme book child page
          $suggestions[] = $variables['theme_hook_original'] . '__book_page';
        }
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function wxt_bootstrap_theme_suggestions_book_navigation_alter(array &$suggestions, array $variables) {
  $moduleHandler = \Drupal::service('module_handler');

  if ($moduleHandler->moduleExists('wxt_ext_book')) {
    $suggestions[] = $variables['theme_hook_original'] . '__gcweb';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function wxt_bootstrap_theme_suggestions_book_tree_alter(array &$suggestions, array $variables) {
  $moduleHandler = \Drupal::service('module_handler');

  if ($moduleHandler->moduleExists('wxt_ext_book')) {
    $suggestions[] = 'book_tree__gcweb';
  }
}

/**
 * Implements hook_preprocess_block.
 */
function wxt_bootstrap_preprocess_block(&$variables) {
  $plugin_id = $variables['elements']['#plugin_id'];

  if ($plugin_id == 'system_branding_block') {
    $language = \Drupal::languageManager()->getCurrentLanguage()->getId();

    if ($language == 'en') {
      $variables['language_opposite'] = 'fr';
      $variables['label_opposite'] = 'Gouvernement du Canada';
    }
    elseif ($language == 'fr') {
      $variables['language_opposite'] = 'en';
      $variables['label_opposite'] = 'Government of Canada';
    }
  }
}

/**
 * Implements hook_preprocess_block.
 */
function wxt_bootstrap_preprocess_input__button(&$vars) {
  if (isset($vars['attributes'])) {
    $attrObj = $vars['attributes'];
    if ($attrObj->offsetExists('id') == 'wb-srch-sub') {
      $attrObj->setAttribute('title', t('Search'));
    }
  }
}

/**
 * Implements hook_preprocess_input().
 */
function wxt_bootstrap_preprocess_input(&$variables) {
  if (!empty($variables['attributes']['id'])) {
    $id = $variables['attributes']['id']->value();
  }

  if (!empty($id) && $id == 'wb-srch-sub') {
    $variables['search_submit'] = 'true';
  }
  else {
    $variables['search_submit'] = 'false';
  }
}
